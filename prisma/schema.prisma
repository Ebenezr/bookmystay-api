// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "src/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guest {
  id          Int           @id @default(autoincrement())
  name        String
  phone1      String
  phone2      String?
  gender      Gender
  email       String?
  nationality String
  Reservation Reservation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  imgUrl      String?
  nationalId  String        @unique

  @@index(fields: [name], type: Hash)
}

model Room {
  id                 Int           @id @default(autoincrement())
  Floor              Floor         @relation(fields: [floorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  floorId            Int
  code               String
  description        String        @db.Text
  maxChild           Int?          @default(0)
  maxAdult           Int
  maxOccupancy       Int
  availabilityStatus Boolean       @default(true)
  vacant             Boolean       @default(true)
  RoomType           RoomType      @relation(fields: [roomTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomTypeId         Int
  rate               Decimal       @default(0)
  Bed                Bed[]
  Reservation        Reservation[]
  RoomAmenity        RoomAmenity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [code], type: Hash)
  @@index([roomTypeId])
}

model Amenity {
  id          Int           @id @default(autoincrement())
  name        String
  RoomAmenity RoomAmenity[]

  @@unique([name])
}

model RoomAmenity {
  id        Int     @id @default(autoincrement())
  roomId    Int
  amenityId Int
  room      Room    @relation(fields: [roomId], references: [id], onUpdate: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onUpdate: Cascade)

  @@index([roomId])
  @@index([amenityId])
}

model RoomType {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  Room        Room[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]
}

model MealPlan {
  id          Int           @id @default(autoincrement())
  name        String
  rate        Decimal?      @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]
}

model Bed {
  id        Int      @id @default(autoincrement())
  name      String
  status    Boolean  @default(true)
  bedType   String
  Room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id           Int               @id @default(autoincrement())
  code         String
  status       ResavationStatus?
  User         User              @relation(fields: [staffId], references: [id], onUpdate: Cascade)
  staffId      Int
  bookTime     DateTime          @default(now())
  checkIn      DateTime
  checkOut     DateTime
  adultNumber  Int?
  childNumber  Int?
  taxName      String?
  note         String?           @db.Text
  Room         Room              @relation(fields: [roomId], references: [id], onUpdate: Cascade)
  roomId       Int
  RoomType     RoomType          @relation(fields: [roomTypeId], references: [id], onUpdate: Cascade)
  roomTypeId   Int               @default(1)
  Guest        Guest             @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  guestId      Int
  roomTotal    Decimal?          @default(0)
  serviceTotal Decimal?          @default(0)
  netTotal     Decimal?          @default(0)
  discount     Decimal?          @default(0)
  taxTotal     Decimal?          @default(0)
  subTotal     Decimal?          @default(0)
  paid         Decimal?          @default(0)
  balance      Decimal?          @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  mealPlan     MealPlan          @relation(fields: [mealPlanId], references: [id], onUpdate: Cascade)
  mealPlanId   Int

  paidStatus paidStatusEnum @default(UNPAID)
  Service    Service[]
  Payment    Payment[]

  @@index([guestId])
  @@index([roomId])
}

model Tax {
  id    Int     @id @default(autoincrement())
  name  String
  ratio Decimal
}

model Discount {
  id    Int     @id @default(autoincrement())
  name  String
  ratio Decimal
}

model PaymentMode {
  id   Int    @id @default(autoincrement())
  name String
}

model Curency {
  id     Int     @id @default(autoincrement())
  name   String
  symbol String?
}

model Payment {
  id            Int         @id @default(autoincrement())
  PaymentMode   String?
  accountNumber String?
  referenceId   String?
  Reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservationId Int
  amount        Decimal
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Service {
  id            Int         @id @default(autoincrement())
  type          String
  amount        Decimal
  quantity      Int         @default(0)
  Reservation   Reservation @relation(fields: [reservationId], references: [id], onUpdate: Cascade)
  reservationId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ServiceList {
  id            Int         @id @default(autoincrement())
  name          String
  rate          Decimal
  ServiceType   ServiceType @relation(fields: [serviceTypeId], references: [id], onUpdate: Cascade)
  serviceTypeId Int
}

model ServiceType {
  id          Int           @id @default(autoincrement())
  type        String
  ServiceList ServiceList[]
}

model User {
  id                   Int           @id @default(autoincrement())
  role                 Role          @default(USER)
  name                 String
  email                String        @unique
  password             String?
  phone                String
  Department           Department?   @relation(fields: [departmentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  departmentId         Int?
  activeStatus         Boolean       @default(true)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  Reservation          Reservation[]
  passwordResetToken   String?       @unique
  passwordResetExpires DateTime?
  superuser            Boolean       @default(false)

  @@index([departmentId])
}

model Floor {
  id   Int    @id @default(autoincrement())
  name String
  Room Room[]
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  phone      String
  address    String
  regNo      String?
  logoUrl    String?
  entityType String?
  website    String?
}

enum Role {
  ADMIN
  USER
  MANAGER
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum paidStatusEnum {
  PAID
  UNPAID
  PENDING
  PARTIAL
}

enum ResavationStatus {
  NEW
  CONFIRMED
  CHECKIN
  CANCELED
  UNCONFIRMED
  CHECKOUT
}
